[
  {
    "classname": "ClusterNodePlannedRebootSingleNode",
    "resourcetype": "ClusterNode",
    "faultinstructions": [
      "#1. Select a cluster node",
      "    $clusterName = 'S-Cluster' # enter your cluster name",
      "    $clusterNodes = Get-ClusterNode -Cluster $clusterName",
      "    $selectedNodeName = ($clusternodes[$(Get-Random -Maximum $clusternodes.Count)]).Name",
      "#2. Pause the node",
      "    Suspend-ClusterNode -cluster $clusterName -name $selectedNodeName -drain -ForceDrain -Wait",
      "#3. Restart the node",
      "    Restart-Computer -ComputerName $selectedNodeName -Wait -For Wmi -Force -Timeout 10800 # timeout is 3 hours",
      "#4. Resume the node",
      "    Resume-Clusternode -cluster $clusterName -name $selectedNodeName -ErrorAction Stop",
      ""
    ]
  },

  {
    "classname": "ClusterNodePlannedRebootTwoNodes",
    "resourcetype": "ClusterNode",
    "faultinstructions": [
      "# This fault would restart two nodes. Solution may become unhealthy if",
      "#   - Remaining nodes don't have enough memory to host all VMs",
      "#   - All the domain controllers are offline.",
      "",
      "#1. Select two cluster nodes",
      "    $clusterName = 'S-Cluster' # enter your cluster name",
      "    $clusterNodes = Get-ClusterNode -Cluster $clusterName",
      "    $randomNumber1 = Get-Random -Maximum $clusterNodes.Count",
      "    $randomNumber2 = Get-Random -Maximum $clusterNodes.Count",
      "    if ($randomNumber2 -eq $randomNumber1) { $randomNumber2 = (($randomNumber2 + 1) % $clusternodes.Count) };",
      "    $selectedNodeName1 = ($clusternodes[$randomNumber1]).Name",
      "    $selectedNodeName2 = ($clusternodes[$randomNumber2]).Name",
      "    $selectedNodeName1; $selectedNodeName2",
      "",
      "# Below table show you the memory capacity on each node and the size of memory used by VMs",
      "    foreach ($node in $clusterNodes) { $node | select Name, @{ N='Capacity'; E={Get-CimInstance -ComputerName $node.Name -class Win32_PhysicalMemory | Measure-Object -Property capacity -Sum | Foreach {([math]::round(($_.Sum / 1GB),2))} } }, @{ N='Used by VM'; E={Get-VM -CimSession $node.Name | Measure-Object -Property MemoryAssigned -Sum | Foreach {([math]::round(($_.Sum / 1GB),2))} } } }",
      "",
      "# Below cmdlets show you the domain controller names and VM names on the selected nodes",
      "    Get-ADDomainController -Filter * | Select-Object Name",
      "    Get-VM -ComputerName $selectedNodeName1",
      "    Get-VM -ComputerName $selectedNodeName2",
      "",
      "#2. Pause both nodes",
      "    Suspend-ClusterNode -cluster $clusterName -name $selectedNodeName1 -drain -ForceDrain -Wait",
      "    Suspend-ClusterNode -cluster $clusterName -name $selectedNodeName2 -drain -ForceDrain -Wait",
      "#3. Restart both nodes",
      "    $job1 = Start-Job -ArgumentList $selectedNodeName1 -ScriptBlock { param($computerName) Restart-Computer -ComputerName $computerName -Wait -For Wmi -Force -Timeout 10800 } ",
      "    $job2 = Start-Job -ArgumentList $selectedNodeName2 -ScriptBlock { param($computerName) Restart-Computer -ComputerName $computerName -Wait -For Wmi -Force -Timeout 10800 } ",
      "    Wait-Job $job1",
      "    Wait-Job $job2",
      "#4. Resume both nodes",
      "    Resume-Clusternode -cluster $clusterName -name $selectedNodeName1 -ErrorAction Stop",
      "    Resume-Clusternode -cluster $clusterName -name $selectedNodeName2 -ErrorAction Stop",
      ""
    ]
  },

  {
    "classname": "ClusterNodeUnPlannedRebootSingleNodeBugCheck",
    "resourcetype": "ClusterNode",
    "faultinstructions": [
      "# Prerequisites: ",
      "#   - SecureBoot is disabled on each node.",
      "#   - Disable test-signing on each node.",
      "#     > Bcdedit.exe -set TESTSIGNING OFF",
      "#   - Bugchecker tool is copied to each node.",
      "",
      "#1. Select a cluster node",
      "    $clusterName = 'S-Cluster' # enter your cluster name",
      "    $clusterNodes = Get-ClusterNode -Cluster $clusterName",
      "    $selectedNodeName = ($clusternodes[$(Get-Random -Maximum $clusternodes.Count)]).Name",
      "    $selectedNodeName",
      "#2. Use Bugchecker.exe to Bugcheck $selectedNode",
      "    Enter-Pssession $selectedNodeName",
      "    & Bugchecker.exe bugcheck",
      ""
    ]
  },

  {
    "classname": "ClusterNodeUnPlannedRebootSingleNodePowerOff",
    "resourcetype": "ClusterNode",
    "faultinstructions": [
      "#1. Select a cluster node",
      "    $clusterName = 'S-Cluster' # enter your cluster name",
      "    $clusterNodes = Get-ClusterNode -Cluster $clusterName",
      "    $selectedNodeName = ($clusternodes[$(Get-Random -Maximum $clusternodes.Count)]).Name",
      "    $selectedNodeName",
      "#2. Power Off $selectedNode",
      "#3. Check the https://adminportal.ExternalFQDN site and confirm that the node is down",
      "#4. Power On $selectedNode",
      ""
    ]
  },

  {
    "classname": "ClusterNodeUnPlannedRebootTwoNodesBugCheck",
    "resourcetype": "ClusterNode",
    "faultinstructions": [
      "# Prerequisites: ",
      "#   - SecureBoot is disabled on each node.",
      "#   - Disable test-signing on each node.",
      "#     > Bcdedit.exe -set TESTSIGNING OFF",
      "#   - Bugchecker tool is copied to each node.",
      "",
      "# This fault would bring down two nodes. Solution may become unhealthy if",
      "#   - Remaining nodes don't have enough memory to host all VMs",
      "#   - All the domain controllers are offline.",
      "",
      "#1. Select two cluster nodes",
      "    $clusterName = 'S-Cluster' # enter your cluster name",
      "    $clusterNodes = Get-ClusterNode -Cluster $clusterName",
      "    $randomNumber1 = Get-Random -Maximum $clusterNodes.Count",
      "    $randomNumber2 = Get-Random -Maximum $clusterNodes.Count",
      "    if ($randomNumber2 -eq $randomNumber1) { $randomNumber2 = (($randomNumber2 + 1) % $clusternodes.Count) };",
      "    $selectedNodeName1 = ($clusternodes[$randomNumber1]).Name",
      "    $selectedNodeName2 = ($clusternodes[$randomNumber2]).Name",
      "    $selectedNodeName1; $selectedNodeName2",
      "",
      "# Below table show you the memory capacity on each node and the size of memory used by VMs",
      "    foreach ($node in $clusterNodes) { $node | select Name, @{ N='Capacity'; E={Get-CimInstance -ComputerName $node.Name -class Win32_PhysicalMemory | Measure-Object -Property capacity -Sum | Foreach {([math]::round(($_.Sum / 1GB),2))} } }, @{ N='Used by VM'; E={Get-VM -CimSession $node.Name | Measure-Object -Property MemoryAssigned -Sum | Foreach {([math]::round(($_.Sum / 1GB),2))} } } }",
      "",
      "# Below cmdlets show you the domain controller names and VM names on the selected nodes",
      "    Get-ADDomainController -Filter * | Select-Object Name",
      "    Get-VM -ComputerName $selectedNodeName1",
      "    Get-VM -ComputerName $selectedNodeName2",
      "",
      "#2. Use Bugchecker.exe to Bugcheck $selectedNodeName1 and $selectedNodeName2",
      "    Enter-Pssession $selectedNodeName1",
      "    & Bugchecker.exe bugcheck",
      "    Exit",
      "    Enter-Pssession $selectedNodeName2",
      "    & Bugchecker.exe bugcheck",
      "    Exit",
      ""
    ]
  },

  {
    "classname": "ClusterNodeUnPlannedRebootTwoNodesPowerOff",
    "resourcetype": "ClusterNode",
    "faultinstructions": [
      "# This fault would power off two nodes. Solution may become unhealthy if",
      "#   - Remaining nodes don't have enough memory to host all VMs",
      "#   - All the domain controllers are offline.",
      "",
      "#1. Select two cluster nodes",
      "    $clusterName = 'S-Cluster' # enter your cluster name",
      "    $clusterNodes = Get-ClusterNode -Cluster $clusterName",
      "    $randomNumber1 = Get-Random -Maximum $clusterNodes.Count",
      "    $randomNumber2 = Get-Random -Maximum $clusterNodes.Count",
      "    if ($randomNumber2 -eq $randomNumber1) { $randomNumber2 = (($randomNumber2 + 1) % $clusternodes.Count) };",
      "    $selectedNodeName1 = ($clusternodes[$randomNumber1]).Name",
      "    $selectedNodeName2 = ($clusternodes[$randomNumber2]).Name",
      "    $selectedNodeName1; $selectedNodeName2",
      "",
      "# Below table show you the memory capacity on each node and the size of memory used by VMs",
      "    foreach ($node in $clusterNodes) { $node | select Name, @{ N='Capacity'; E={Get-CimInstance -ComputerName $node.Name -class Win32_PhysicalMemory | Measure-Object -Property capacity -Sum | Foreach {([math]::round(($_.Sum / 1GB),2))} } }, @{ N='Used by VM'; E={Get-VM -CimSession $node.Name | Measure-Object -Property MemoryAssigned -Sum | Foreach {([math]::round(($_.Sum / 1GB),2))} } } }",
      "",
      "# Below cmdlets show you the domain controller names and VM names on the selected nodes",
      "    Get-ADDomainController -Filter * | Select-Object Name",
      "    Get-VM -ComputerName $selectedNodeName1",
      "    Get-VM -ComputerName $selectedNodeName2",
      "",
      "#2. Power Off $selectedNodeName1 and wait for 60 seconds.",
      "#3. Power Off $selectedNodeName2 and wait for 60 seconds.",
      "#4. Power On both nodes at the same time.",
      ""
    ]
  },

  {
    "classname": "ClusterNodeUnPlannedRebootTwoNodesPowerOffDelayStart",
    "resourcetype": "ClusterNode",
    "faultinstructions": [
      "# This fault would power off two nodes. Solution may become unhealthy if",
      "#   - Remaining nodes don't have enough memory to host all VMs",
      "#   - All the domain controllers are offline.",
      "",
      "#1. Select two cluster nodes",
      "    $clusterName = 'S-Cluster' # enter your cluster name",
      "    $clusterNodes = Get-ClusterNode -Cluster $clusterName",
      "    $randomNumber1 = Get-Random -Maximum $clusterNodes.Count",
      "    $randomNumber2 = Get-Random -Maximum $clusterNodes.Count",
      "    if ($randomNumber2 -eq $randomNumber1) { $randomNumber2 = (($randomNumber2 + 1) % $clusternodes.Count) };",
      "    $selectedNodeName1 = ($clusternodes[$randomNumber1]).Name",
      "    $selectedNodeName2 = ($clusternodes[$randomNumber2]).Name",
      "    $selectedNodeName1; $selectedNodeName2",
      "",
      "# Below table show you the memory capacity on each node and the size of memory used by VMs",
      "    foreach ($node in $clusterNodes) { $node | select Name, @{ N='Capacity'; E={Get-CimInstance -ComputerName $node.Name -class Win32_PhysicalMemory | Measure-Object -Property capacity -Sum | Foreach {([math]::round(($_.Sum / 1GB),2))} } }, @{ N='Used by VM'; E={Get-VM -CimSession $node.Name | Measure-Object -Property MemoryAssigned -Sum | Foreach {([math]::round(($_.Sum / 1GB),2))} } } }",
      "",
      "# Below cmdlets show you the domain controller names and VM names on the selected nodes",
      "    Get-ADDomainController -Filter * | Select-Object Name",
      "    Get-VM -ComputerName $selectedNodeName1",
      "    Get-VM -ComputerName $selectedNodeName2",
      "",
      "#2. Power Off $selectedNodeName1 and wait for 60 seconds.",
      "#3. Power Off $selectedNodeName2 and wait for 60 seconds.",
      "#4. Power On both nodes but have 5 minutes delay between $selectedNodeName1 and $selectedNodeName2",
      ""
    ]
  }
]
